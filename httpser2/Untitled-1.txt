#pragma warning(disable:4996)

#include <stdio.h>

#include <winsock2.h>

#include <iostream>

#include <ostream>

#define PORT 5678
#define SERVERADDR "127.0.0.1"

using namespace std;

int server1();

int main()

{

	setlocale(LC_ALL, "Russian");


	int vibor;

	cin >> vibor;


		server1();

	return 0;

}

int server1() {
    int i = 0;
    while (i < 10)
    {
    char buff[1024];
    printf("TCP DEMO CLIENT\n");


    // Шаг 1 - инициализация библиотеки Winsock
    if (WSAStartup(0x202, (WSADATA*)&buff[0]))
    {
        printf("WSAStart error %d\n", WSAGetLastError());
        return -1;
    }

    // Шаг 2 - создание сокета
    SOCKET my_sock;
    my_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (my_sock < 0)
    {
        printf("Socket() error %d\n", WSAGetLastError());
        return -1;
    }

    // Шаг 3 - установка соединения
    // заполнение структуры sockaddr_in - указание адреса и порта сервера
    sockaddr_in dest_addr;
    dest_addr.sin_family = AF_INET;
    dest_addr.sin_port = htons(PORT);
    HOSTENT* hst;

    // преобразование IP адреса из символьного в сетевой формат
    if (inet_addr(SERVERADDR) != INADDR_NONE)
        dest_addr.sin_addr.s_addr = inet_addr(SERVERADDR);
    else
    {
        // попытка получить IP адрес по доменному имени сервера
        if (hst = gethostbyname(SERVERADDR))
            // hst->h_addr_list содержит не массив адресов,
            // а массив указателей на адреса
            ((unsigned long*)&dest_addr.sin_addr)[0] =
            ((unsigned long**)hst->h_addr_list)[0][0];
        else
        {
            printf("Invalid address %s\n", SERVERADDR);
            closesocket(my_sock);
            WSACleanup();
            return -1;
        }
    }

    // адрес сервера получен - пытаемся установить соединение
    if (connect(my_sock, (sockaddr*)&dest_addr, sizeof(dest_addr)))
    {
        printf("Connect error %d\n", WSAGetLastError());
        return -1;
    }
    printf("Soedinenie s %s uspeshno ustanovlenno\n \
            Type quit for quit\n\n", SERVERADDR);
    // Шаг 4 - чтение и передача сообщений
        // ставим завершающий ноль в конце строки
    string rere;
    string score;
    int vib;
    cout << "1 - zapic; 2 - vivod" << endl;
    cin >> vib;
    if (vib == 1) {
        cout << "BAF" << endl;
        cin >> rere;
        cin >> score;
        string rez = rere + " " + score;
        const char* pBuf = rez.c_str();
        send(my_sock, pBuf, strlen(pBuf), 0);
        recv(my_sock, &buff[0], sizeof(buff) - 1, 0);
        // выводим на экран
        printf(buff);

        printf("Recv error %d\n", WSAGetLastError());
        closesocket(my_sock);
    }
    else {
        string rez = "Rez";
        const char* pBuf = rez.c_str();
        send(my_sock, pBuf, strlen(pBuf), 0);
        recv(my_sock, &buff[0], sizeof(buff) - 1, 0);
        // выводим на экран
        printf(buff);
        printf("Recv error %d\n", WSAGetLastError());
        closesocket(my_sock);
    }
    cout << "i" << endl;
    cin >> i;
    }
    WSACleanup();
    return -1;
}